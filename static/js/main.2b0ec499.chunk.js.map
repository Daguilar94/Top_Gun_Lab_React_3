{"version":3,"sources":["constants.js","components/Character.js","containers/CharacterList.js","components/Home.js","components/NotFound.js","containers/CharacterDetails.js","AppContainer.js","serviceWorker.js","index.js"],"names":["BASE_REMOTE_ENDPOINT","StyledCharacterFigure","styled","figure","_templateObject","StyledCharacterImg","img","_templateObject2","StyledCharacterCaption","figcaption","_templateObject3","Character","_ref","imgSrc","name","react_default","a","createElement","src","alt","StyledCharactersGrid","div","CharacterList_templateObject","CharacterList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","getCharacters","axios","get","concat","then","response","setState","characters","content","data","results","error","createCharacterError","catch","message","state","_this$state$character","map","id","image","react_router_dom","key","to","components_Character","Component","StyledAppContainer","Home_templateObject","StyledHeader","header","Home_templateObject2","Home","containers_CharacterList","NotFound","StyledProfile","CharacterDetails_templateObject","StyledCharacter","CharacterDetails_templateObject2","StyledCharacterInfo","CharacterDetails_templateObject3","StyledProfilePic","_templateObject4","CharacterDetails","match","params","characterInfo","gender","location","origin","species","status","locationName","originName","AppContainer","react_router","exact","path","render","component","Boolean","window","hostname","ReactDOM","src_AppContainer","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b0ec499.chunk.js","sourcesContent":["export const BASE_LOCAL_ENDPOINT = \"http://localhost:3004\";\nexport const BASE_REMOTE_ENDPOINT = \"https://rickandmortyapi.com/api\";\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledCharacterFigure = styled.figure`\n    display: inline-block;\n    border-radius: 5px;\n    overflow: hidden;\n    margin: 0;\n`;\n\nconst StyledCharacterImg = styled.img`\n    width: 200px;\n    height: 200px;\n    vertical-align: middle;\n`;\nconst StyledCharacterCaption = styled.figcaption`\n    background-color: #222;\n    text-decoration: none;\n    color: #fff;\n    padding: 3px;\n`;\n\nconst Character = ({ imgSrc, name }) => {\n    return (\n        <StyledCharacterFigure>\n            <StyledCharacterImg src={imgSrc} alt=\"\"/>\n            <StyledCharacterCaption>{name}</StyledCharacterCaption>    \n        </StyledCharacterFigure>\n    );\n}\n \nexport default Character;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { BASE_REMOTE_ENDPOINT } from \"../constants\";\nimport Character from '../components/Character';\n\nconst StyledCharactersGrid = styled.div`\n    margin-top: 10px;\n    display: grid;\n    justify-content: center;\n    grid-gap: 5px;\n    grid-template-columns: repeat(auto-fill, 200px);\n`;\n\nclass CharacterList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            characters: {\n                content: [],\n                error: false\n            }\n         }\n    }\n\n    componentDidMount = () => {\n        this.getCharacters();\n    }\n\n    getCharacters = () => {\n        axios.get(`${BASE_REMOTE_ENDPOINT}/character`)\n        .then(response => {\n            this.setState({\n                characters: {\n                    content: response.data.results,\n                    error: ''\n                },\n                createCharacterError: false\n            })\n        })\n        .catch(error => {\n            this.setState({\n                characters: {\n                    error: error.message\n                }\n            })\n        })\n    }\n\n    render() { \n        const { characters: { content, error } } = this.state;\n\n        if (error) {\n            return <div>Fetch Error: {error}</div>\n        }\n\n        return (\n            <StyledCharactersGrid>\n                {content.map(({ id, image, name }) => (\n                    <Link key={id} to={`/characters/${id}`}>\n                        <Character imgSrc={image} name={name}/>\n                    </Link>\n                ))}\n            </StyledCharactersGrid>\n        );\n    }\n}\n \nexport default CharacterList;\n\n","import React from 'react';\nimport CharacterList from '../containers/CharacterList';\nimport styled from 'styled-components';\n\nconst StyledAppContainer = styled.div`\n    text-align: center;\n`;\n\nexport const StyledHeader = styled.header`\n    background-color: #222;\n    color: #fff;\n    overflow: auto;\n`;\n\nfunction Home() {\n  return (\n      <StyledAppContainer>\n        <StyledHeader>\n          <h1>Rick and Morty Multiverse</h1>\n        </StyledHeader>\n        <CharacterList />\n      </StyledAppContainer>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nconst NotFound = () => {\n    return ( <h1>Sorry, you're lost... â˜ </h1> );\n}\n \nexport default NotFound;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { BASE_REMOTE_ENDPOINT } from \"../constants\";\nimport { StyledHeader } from \"../components/Home\";\n\nconst StyledProfile = styled.div`\n    text-align: center;\n`;\n\nconst StyledCharacter = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center\n    margin: 10px 0;\n`;\n\nconst StyledCharacterInfo = styled.div`\n    text-align: left;\n    margin-left: 10px;\n`;\n\nconst StyledProfilePic = styled.img`\n    height: 300px;\n    width: 300px;\n`;\n\nclass CharacterDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            characterInfo: {\n                gender: \"\",\n                image: \"\",\n                location: { name: \"\" },\n                name: \"\",\n                origin: { name: \"\" },\n                species: \"\",\n                status: \"\"\n            },\n            error: ''\n        }\n    }\n\n    componentDidMount = () => {\n        const { match: { params: { id } } } = this.props;\n        axios.get(`${BASE_REMOTE_ENDPOINT}/character/${id}`)\n        .then(response => {\n            this.setState({\n                characterInfo: response.data\n            })\n        })\n        .catch(error => {\n            this.setState({\n                characters: {\n                    error: error.message\n                }\n            })\n        })\n    }\n\n    render() { \n        const {\n            characterInfo: {\n                gender,\n                image,\n                location: { name: locationName },\n                name,\n                origin: { name: originName },\n                species,\n                status\n            }\n        } = this.state;\n\n        return ( \n            <StyledProfile>\n                <StyledHeader><h1>{name}</h1></StyledHeader>\n                <StyledCharacter>\n                    <StyledProfilePic src={image} alt=\"Character\"/>\n                    <StyledCharacterInfo>\n                        <p><b>Gender: </b>{gender}</p>\n                        <p><b>Location: </b>{locationName}</p>\n                        <p><b>Origin: </b>{originName}</p>\n                        <p><b>Species: </b>{species}</p>\n                        <p><b>Status: </b>{status}</p>\n                    </StyledCharacterInfo>\n                </StyledCharacter>\n            </StyledProfile>\n         );\n    }\n}\n \nexport default CharacterDetails;","import React from 'react';\nimport Home from './components/Home';\nimport NotFound from './components/NotFound'\nimport CharacterDetails from './containers/CharacterDetails';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\n\nfunction AppContainer() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route\n            exact\n            path=\"/\"\n            render={() => (\n                <Redirect to=\"/characters\" />\n            )}\n        />\n        <Route exact path=\"/characters\" component={Home} />\n        <Route exact path=\"/characters/:id\" component={CharacterDetails} />\n        <Route component={NotFound} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './AppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}